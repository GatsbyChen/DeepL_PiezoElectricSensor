2023-05-08 12:26:59,378 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2023-05-08 12:27:57,576 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2023-05-08 12:38:48,784 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2023-05-08 12:39:24,070 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2023-05-08 12:39:34,882 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2023-05-08 12:52:29,695 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2023-05-08 12:52:55,583 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2023-05-08 12:59:01,968 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2023-05-08 13:01:04,267 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2023-05-08 13:01:04,284 - pyswarms.single.local_best - INFO - Optimization finished | best cost: 10000.0, best pos: [0.41634639 0.87810224 0.20189576 0.48605329]
2023-05-08 13:01:33,165 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.3, 'k': 3, 'p': 2}
2023-05-08 13:01:33,182 - pyswarms.single.local_best - INFO - Optimization finished | best cost: 10000.0, best pos: [0.18486819 0.25260258 0.33977109 0.31978733]
2023-05-08 13:01:56,837 - pyswarms.single.local_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 1.0, 'k': 3, 'p': 2}
2023-05-08 13:03:12,669 - pyswarms.single.local_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 1.0, 'k': 3, 'p': 2}
2023-05-08 13:05:23,014 - pyswarms.single.local_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 1.0, 'k': 3, 'p': 2}
2023-05-08 13:06:19,182 - pyswarms.single.local_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 1.0, 'k': 3, 'p': 2}
2023-05-08 13:11:18,729 - pyswarms.single.local_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.8, 'k': 3, 'p': 2}
2023-05-08 13:11:18,828 - pyswarms.single.local_best - INFO - Optimization finished | best cost: 10000.0, best pos: [0.78836203 0.72057926 0.96370581 0.45461404]
2023-05-08 13:32:31,713 - pyswarms.single.local_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.8, 'k': 3, 'p': 2}
2023-05-08 13:33:27,729 - pyswarms.single.local_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.8, 'k': 3, 'p': 2}
2023-05-08 13:37:32,094 - pyswarms.single.local_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.8, 'k': 3, 'p': 2}
2023-05-08 13:41:52,185 - pyswarms.single.local_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.8, 'k': 3, 'p': 2}
2023-05-08 13:43:11,573 - pyswarms.single.local_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.8, 'k': 3, 'p': 2}
2023-05-08 13:43:37,738 - tensorflow - WARNING - 5 out of the last 5 calls to <function Model.make_test_function.<locals>.test_function at 0x0000019AFBB809D0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 13:43:42,852 - tensorflow - WARNING - 6 out of the last 6 calls to <function Model.make_test_function.<locals>.test_function at 0x0000019AFF8DA040> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 13:49:15,774 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.2}
2023-05-08 13:49:57,273 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.2}
2023-05-08 13:53:53,900 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.2}
2023-05-08 13:55:30,284 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.2}
2023-05-08 13:55:54,717 - tensorflow - WARNING - 5 out of the last 5 calls to <function Model.make_test_function.<locals>.test_function at 0x00000142D855F9D0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 13:55:59,285 - tensorflow - WARNING - 6 out of the last 6 calls to <function Model.make_test_function.<locals>.test_function at 0x00000142E62B90D0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 14:13:30,675 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 502881562.5, best pos: [3.19588695 2.19106728 0.06778439 0.60330864]
2023-05-08 14:13:30,680 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.3}
2023-05-08 14:24:03,459 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.2}
2023-05-08 14:24:15,939 - tensorflow - WARNING - 5 out of the last 5 calls to <function Model.make_test_function.<locals>.test_function at 0x000001BAEE9E8AF0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 14:24:18,625 - tensorflow - WARNING - 6 out of the last 6 calls to <function Model.make_test_function.<locals>.test_function at 0x000001BAEEB19E50> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 14:28:45,563 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 111359.43412780762, best pos: [3.        2.        0.5       0.8436464]
2023-05-08 14:28:45,566 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.3}
2023-05-08 14:34:54,353 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 188977602560000.0, best pos: [3.        2.        0.5       0.0828738]
2023-05-08 14:34:54,356 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.5}
2023-05-08 14:42:35,023 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 6782539530240000.0, best pos: [3.         2.         0.5        0.03679781]
2023-05-08 14:42:35,026 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.2}
2023-05-08 14:46:14,334 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.2}
2023-05-08 14:46:17,577 - tensorflow - WARNING - 5 out of the last 5 calls to <function Model.make_test_function.<locals>.test_function at 0x00000186AA0C50D0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 14:46:18,202 - tensorflow - WARNING - 6 out of the last 6 calls to <function Model.make_test_function.<locals>.test_function at 0x00000186AB16A790> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 14:46:45,718 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 127.00011022388935, best pos: [3.13180915 2.08026678 0.29410396 0.87387046]
2023-05-08 14:46:45,721 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.3}
2023-05-08 14:47:18,664 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 296.31515964865685, best pos: [3.35165487 2.19246598 0.5        0.95218678]
2023-05-08 14:47:18,667 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.3, 'c2': 0.3, 'w': 0.5}
2023-05-08 14:47:53,725 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 570.6799402832985, best pos: [3.45688757 2.52691555 0.5        1.29273624]
2023-05-08 14:47:53,727 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.2}
2023-05-08 14:48:25,137 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 534.1187119483948, best pos: [3.13459419 2.1644834  0.49683769 0.97755811]
2023-05-08 14:48:25,141 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.3}
2023-05-08 14:48:56,452 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 379.33360785245895, best pos: [3.29383759 2.36607041 0.5        0.71178115]
2023-05-08 14:48:56,454 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.5}
2023-05-08 14:49:29,699 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 328.29124480485916, best pos: [3.34007329 2.30494552 0.5        0.88240571]
2023-05-08 14:49:29,701 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.3, 'c2': 0.8, 'w': 0.2}
2023-05-08 14:50:01,131 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 426.76806449890137, best pos: [3.11930996 2.14939098 0.5        0.20650964]
2023-05-08 14:50:01,133 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.3, 'c2': 0.8, 'w': 0.3}
2023-05-08 14:50:34,551 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 307.0075623691082, best pos: [3.0325555  2.20144255 0.5        1.02285374]
2023-05-08 14:50:34,553 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.3, 'c2': 0.8, 'w': 0.5}
2023-05-08 14:51:09,924 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 411.5603491663933, best pos: [3.66310083 2.64486337 0.5        1.03932003]
2023-05-08 14:51:09,926 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.2}
2023-05-08 14:51:42,305 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 262.8481574356556, best pos: [3.00000000e+00 2.00000000e+00 2.99434895e-03 2.54649768e-02]
2023-05-08 14:51:42,307 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.3}
2023-05-08 14:52:15,012 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 374.00614470243454, best pos: [3.16656912 2.07938406 0.5        0.54960634]
2023-05-08 14:52:15,015 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.5}
2023-05-08 14:52:55,237 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 267.99401268363, best pos: [3.6952867  2.73851984 0.5        1.12033129]
2023-05-08 14:52:55,239 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.2}
2023-05-08 14:53:27,338 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 449.0939900279045, best pos: [3.08745298 2.06360318 0.5        0.56058233]
2023-05-08 14:53:27,341 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.3}
2023-05-08 14:53:59,532 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 337.82903105020523, best pos: [3.1936351  2.21878561 0.27931139 0.76917332]
2023-05-08 14:53:59,534 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.5}
2023-05-08 14:54:41,509 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 145.45142650604248, best pos: [3.2095431  2.24044086 0.5        1.11851411]
2023-05-08 14:54:41,512 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.5, 'c2': 0.8, 'w': 0.2}
2023-05-08 14:55:13,633 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 153.30337919294834, best pos: [3.19739115 2.03363739 0.16777805 0.56413692]
2023-05-08 14:55:13,635 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.5, 'c2': 0.8, 'w': 0.3}
2023-05-08 14:55:45,299 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 432.1170970797539, best pos: [3.         2.         0.17874462 0.31578554]
2023-05-08 14:55:45,302 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.5, 'c2': 0.8, 'w': 0.5}
2023-05-08 14:56:30,157 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 71.85982074588537, best pos: [3.46454936 2.15072844 0.5        1.03222299]
2023-05-08 14:56:30,160 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.8, 'c2': 0.3, 'w': 0.2}
2023-05-08 14:57:01,741 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 503.67865711450577, best pos: [3.05210766 2.17560317 0.5        0.9350732 ]
2023-05-08 14:57:01,744 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.8, 'c2': 0.3, 'w': 0.3}
2023-05-08 14:57:33,364 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 230.80721497535706, best pos: [3.         2.         0.34946393 0.70619408]
2023-05-08 14:57:33,367 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.8, 'c2': 0.3, 'w': 0.5}
2023-05-08 14:58:13,004 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 126.9396860152483, best pos: [3.54298131 2.12072965 0.5        1.02579984]
2023-05-08 14:58:13,006 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.8, 'c2': 0.5, 'w': 0.2}
2023-05-08 14:58:44,751 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 315.0489553809166, best pos: [3.01468758 2.07817131 0.30453376 0.90225091]
2023-05-08 14:58:44,754 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.8, 'c2': 0.5, 'w': 0.3}
2023-05-08 14:59:18,103 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 464.2130807042122, best pos: [3.17032088 2.15841026 0.31580995 1.19508633]
2023-05-08 14:59:18,106 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.8, 'c2': 0.5, 'w': 0.5}
2023-05-08 15:00:02,133 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 40.15202168375254, best pos: [3.3971488  2.17806598 0.44291658 1.00714137]
2023-05-08 15:00:02,135 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.8, 'c2': 0.8, 'w': 0.2}
2023-05-08 15:00:36,069 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 290.8545546233654, best pos: [3.18421217 2.19310111 0.16418469 1.01478422]
2023-05-08 15:00:36,071 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.8, 'c2': 0.8, 'w': 0.3}
2023-05-08 15:01:09,992 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 121.08826078474522, best pos: [3.05585182 2.16893287 0.5        1.0468656 ]
2023-05-08 15:01:09,995 - pyswarms.single.global_best - INFO - Optimize for 5 iters with {'c1': 0.8, 'c2': 0.8, 'w': 0.5}
2023-05-08 15:01:57,606 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 103.32309640944004, best pos: [3.23260369 2.37051789 0.5        1.17552077]
2023-05-08 15:17:36,525 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.8, 'c2': 0.8, 'w': 0.2, 'k': 3, 'p': 2}
2023-05-08 15:17:39,778 - tensorflow - WARNING - 5 out of the last 5 calls to <function Model.make_test_function.<locals>.test_function at 0x000001A5414DF040> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 15:17:40,400 - tensorflow - WARNING - 6 out of the last 6 calls to <function Model.make_test_function.<locals>.test_function at 0x000001A542579700> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 15:18:40,480 - pyswarms.single.local_best - INFO - Optimization finished | best cost: 306.0411475598812, best pos: [3.11486757 2.07329147 0.5        0.58376231]
2023-05-08 15:20:05,465 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.8, 'c2': 0.8, 'w': 0.2, 'k': 3, 'p': 2}
2023-05-08 15:20:08,766 - tensorflow - WARNING - 5 out of the last 5 calls to <function Model.make_test_function.<locals>.test_function at 0x000001A7515DF040> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 15:20:09,399 - tensorflow - WARNING - 6 out of the last 6 calls to <function Model.make_test_function.<locals>.test_function at 0x000001A75267B700> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 15:21:09,035 - pyswarms.single.local_best - INFO - Optimization finished | best cost: 82.46720768511295, best pos: [3.02025524 2.04005292 0.31548244 0.81894338]
2023-05-08 15:21:33,804 - pyswarms.single.local_best - INFO - Optimize for 10 iters with {'c1': 0.8, 'c2': 0.8, 'w': 0.2, 'k': 3, 'p': 2}
2023-05-08 15:21:48,285 - tensorflow - WARNING - 5 out of the last 5 calls to <function Model.make_test_function.<locals>.test_function at 0x0000028F7456E040> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 15:21:51,159 - tensorflow - WARNING - 6 out of the last 6 calls to <function Model.make_test_function.<locals>.test_function at 0x0000028F7561B3A0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
2023-05-08 15:27:21,212 - pyswarms.single.local_best - INFO - Optimization finished | best cost: 5.3513387683779, best pos: [3.         2.         0.02176904 0.91935902]
